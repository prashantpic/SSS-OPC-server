namespace OPC.Client.Core.Domain.ValueObjects
{
    using System;

    /// <summary>
    /// Value object representing an OPC data value, including its actual value, quality, and timestamp.
    /// An immutable container for an OPC tag's value, quality, and timestamp, standardizing how data
    /// is handled across the library.
    /// Implements REQ-CSVC-001, REQ-CSVC-003.
    /// </summary>
    public record OpcDataValue
    {
        /// <summary>
        /// The address of the node this value is for.
        /// </summary>
        public NodeAddress NodeAddress { get; }

        /// <summary>
        /// The actual value of the tag. Can be various .NET types.
        /// </summary>
        public object? Value { get; }

        /// <summary>
        /// The quality status of the tag value (e.g., "Good", "Bad", "Uncertain").
        /// This is a string representation. Specific protocols might use numeric codes.
        /// </summary>
        public string Quality { get; } // Consider using Opc.Ua.StatusCode or a custom enum for better typing.

        /// <summary>
        /// The timestamp when the value was acquired or generated by the source (server or device).
        /// </summary>
        public DateTime Timestamp { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="OpcDataValue"/> record.
        /// </summary>
        /// <param name="nodeAddress">The node address. Cannot be null.</param>
        /// <param name="value">The tag value.</param>
        /// <param name="quality">The quality status string. Cannot be null.</param>
        /// <param name="timestamp">The source timestamp.</param>
        /// <exception cref="ArgumentNullException">Thrown if nodeAddress or quality is null.</exception>
        public OpcDataValue(NodeAddress nodeAddress, object? value, string quality, DateTime timestamp)
        {
            NodeAddress = nodeAddress ?? throw new ArgumentNullException(nameof(nodeAddress));
            Value = value; // Value can be null
            Quality = quality ?? throw new ArgumentNullException(nameof(quality));
            Timestamp = timestamp;

            // Ensure timestamp is in UTC for consistency, if not already.
            // This depends on how timestamps are handled from OPC servers.
            // OPC UA timestamps are UTC. DA/HDA might be local.
            if (timestamp.Kind != DateTimeKind.Utc)
            {
                // This assumption might be incorrect if the source timestamp is truly local and meant to be.
                // For now, let's assume a desire for UTC consistency within the client.
                // Timestamp = DateTime.SpecifyKind(timestamp, DateTimeKind.Utc); // Or timestamp.ToUniversalTime();
            }
        }
    }
}