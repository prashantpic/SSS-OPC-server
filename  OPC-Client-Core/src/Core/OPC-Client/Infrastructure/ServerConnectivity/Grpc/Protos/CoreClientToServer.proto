syntax = "proto3";

package CoreClientToServer;

option csharp_namespace = "OPC.Client.Core.Infrastructure.ServerConnectivity.Grpc.Protos";

// Service for the OPC Client Core to request its configuration from the server.
service ConfigurationService {
  // Retrieves the client-specific configuration.
  rpc GetClientConfiguration (ClientIdentityRequest) returns (ClientConfigurationResponse);
}

// Service for the OPC Client Core to send health status updates to the server.
service HealthService {
  // Sends a health status update from the client.
  rpc SendHealthStatus (ClientHealthStatusUpdate) returns (HealthStatusResponse);
}

// Message representing the client's identity for requests.
message ClientIdentityRequest {
  string client_instance_id = 1; // Unique ID of the client instance making the request
}

// Response containing the client's configuration.
message ClientConfigurationResponse {
  string client_id = 1; // Unique ID assigned by the server for this client
  string connection_id_prefix = 2; // Prefix for connection IDs generated by this client

  string server_endpoint_override = 3; // Optional: Server endpoint if server wants to override client's default
  OpcProtocolType protocol_type_override = 4; // Optional: Protocol type if server wants to override

  UaClientConfigurationMessage ua_config = 5;
  DaClientConfigurationMessage da_config = 6;
  // Add other protocol-specific configs (XML-DA, HDA, A&C) if needed

  ServerCommunicationConfigurationMessage server_comm_config = 7;
  int32 default_operation_timeout_ms = 8;

  repeated TagConfigurationMessage tag_configurations = 9;
  repeated UaSubscriptionConfigMessage initial_ua_subscriptions = 10;

  DataValidationConfigurationMessage data_validation_config = 11;
  CriticalWriteAuditConfigurationMessage critical_write_audit_config = 12;
  WriteOperationLimitConfigurationMessage write_operation_limit_config = 13;
  EdgeAiConfigurationMessage edge_ai_config = 14;
}

message UaClientConfigurationMessage {
  UaSecurityConfigMessage security_config = 1;
  UaUserIdentityMessage user_identity = 2;
  uint32 session_timeout_ms = 3;
  string application_name = 4;
  string application_uri = 5;
  string product_uri = 6;
}

message DaClientConfigurationMessage {
  string server_prog_id = 1;
  string server_class_id = 2;
  string server_host = 3;
}

message ServerCommunicationConfigurationMessage {
  string grpc_server_endpoint_for_client = 1; // The gRPC endpoint this client should use to talk back to the server for other services
  RabbitMqConfigMessage rabbit_mq_settings = 2;
}

message RabbitMqConfigMessage {
  string hostname = 1;
  int32 port = 2;
  string username = 3;
  string password = 4;
  string virtual_host = 5;
  bool use_tls = 6;
  string data_exchange_name = 7;
  string alarm_event_exchange_name = 8;
}

message TagConfigurationMessage {
  string tag_id = 1;
  NodeAddressMessage node_address = 2;
  string display_name = 3;
  string data_type = 4;
  bool is_critical_write = 5;
  bool is_monitored = 6;
  double deadband_value = 7; // Optional: presence indicates it's set
  string data_validation_rule = 8;
}

message NodeAddressMessage {
  string identifier = 1;
  uint32 namespace_index = 2; // Use optional for this, or a wrapper
  bool has_namespace_index = 3; // To indicate if namespace_index is set
}

message UaSubscriptionConfigMessage {
  double publishing_interval_ms = 1;
  uint32 lifetime_count = 2;
  uint32 max_keep_alive_count = 3;
  uint32 max_notifications_per_publish = 4;
  uint32 priority = 5; // byte in C#, uint32 in proto
  repeated UaMonitoredItemConfigMessage monitored_items = 6;
}

message UaMonitoredItemConfigMessage {
  NodeAddressMessage node_address = 1;
  double sampling_interval_ms = 2;
  string deadband_type = 3; // e.g., "None", "Absolute", "Percent"
  double deadband_value = 4;
  uint32 queue_size = 5;
  string data_change_filter = 6; // e.g., "VALUE", "STATUS_VALUE"
}

message DataValidationConfigurationMessage {
  bool enable_validation = 1;
  map<string, string> validation_rules = 2; // Key: NodeAddress string, Value: Rule string
}

message CriticalWriteAuditConfigurationMessage {
  bool enable_auditing = 1;
  repeated string critical_tag_ids = 2;
}

message WriteOperationLimitConfigurationMessage {
  bool enable_limiting = 1;
  int32 max_writes_per_second = 2; // Optional
  map<string, double> value_change_thresholds = 3; // Key: NodeAddress string, Value: Threshold
}

message EdgeAiConfigurationMessage {
  bool enable_ai_processing = 1;
  string model_path = 2;
  repeated string input_tag_ids = 3;
  repeated string output_tag_ids = 4;
  int32 inference_interval_ms = 5;
}


enum OpcProtocolType {
  OPC_PROTOCOL_TYPE_UNKNOWN = 0;
  OPC_PROTOCOL_TYPE_DA = 1;
  OPC_PROTOCOL_TYPE_UA = 2;
  OPC_PROTOCOL_TYPE_XML_DA = 3;
  OPC_PROTOCOL_TYPE_HDA = 4;
  OPC_PROTOCOL_TYPE_AC = 5;
}

message UaSecurityConfigMessage {
  string security_policy_uri = 1;
  string message_security_mode = 2; // e.g., "SignAndEncrypt"
  string client_certificate_thumbprint = 3;
  string client_certificate_store_path = 4;
  string client_certificate_subject_name = 5;
  string client_certificate_file_path = 6;
  string client_certificate_file_password = 7; // Handle with care
  string trusted_peer_certificate_store_path = 8;
  string rejected_certificate_store_path = 9;
  string issuer_certificate_store_path = 10;
  bool auto_accept_untrusted_certificates = 11;
}

message UaUserIdentityMessage {
  UserIdentityTypeMessage type = 1;
  string username = 2;
  string password = 3; // Handle with care
  string certificate_thumbprint = 4;
  string certificate_store_path = 5;
  string certificate_file_path = 6;
  string certificate_file_password = 7; // Handle with care
  string issued_token = 8;
  string policy_id = 9;
}

enum UserIdentityTypeMessage {
  USER_IDENTITY_TYPE_ANONYMOUS = 0;
  USER_IDENTITY_TYPE_USERNAME = 1;
  USER_IDENTITY_TYPE_CERTIFICATE = 2;
  USER_IDENTITY_TYPE_ISSUED_TOKEN = 3;
}


// Message for the client to send its health status.
message ClientHealthStatusUpdate {
  string client_instance_id = 1;
  google.protobuf.Timestamp timestamp_utc = 2;
  ClientStatus client_status = 3;
  double cpu_usage_percent = 4; // Optional
  double memory_usage_mb = 5;   // Optional
  map<string, ConnectionStatusMessage> opc_connection_statuses = 6; // Key: ConnectionId
  map<string, SubscriptionStatusMessage> ua_subscription_statuses = 7; // Key: SubscriptionId (client-side)
}

enum ClientStatus {
  CLIENT_STATUS_UNKNOWN = 0;
  CLIENT_STATUS_STARTING = 1;
  CLIENT_STATUS_RUNNING = 2;
  CLIENT_STATUS_DEGRADED = 3;
  CLIENT_STATUS_STOPPING = 4;
  CLIENT_STATUS_STOPPED = 5;
  CLIENT_STATUS_ERROR = 6;
}

message ConnectionStatusMessage {
    string endpoint_url = 1;
    OpcProtocolType protocol = 2;
    ConnectionState state = 3;
    google.protobuf.Timestamp last_connected_utc = 4;
    google.protobuf.Timestamp last_error_utc = 5;
    string last_error_message = 6;
}

enum ConnectionState {
    CONNECTION_STATE_UNKNOWN = 0;
    CONNECTION_STATE_DISCONNECTED = 1;
    CONNECTION_STATE_CONNECTING = 2;
    CONNECTION_STATE_CONNECTED = 3;
    CONNECTION_STATE_ERROR = 4;
    CONNECTION_STATE_RECONNECTING = 5;
}

message SubscriptionStatusMessage {
    string connection_id = 1; // Parent OPC connection
    double publishing_interval_ms = 2;
    SubscriptionState state = 3; // e.g., Active, Error, Disconnected
    uint32 monitored_item_count = 4;
    uint32 buffered_item_count = 5; // REQ-CSVC-026
    google.protobuf.Timestamp last_data_change_utc = 6;
    google.protobuf.Timestamp last_keep_alive_utc = 7;
}

enum SubscriptionState {
    SUBSCRIPTION_STATE_UNKNOWN = 0;
    SUBSCRIPTION_STATE_CREATING = 1;
    SUBSCRIPTION_STATE_ACTIVE = 2;
    SUBSCRIPTION_STATE_ERROR = 3;
    SUBSCRIPTION_STATE_DISCONNECTED = 4; // Lost connection, attempting recovery
    SUBSCRIPTION_STATE_DELETED = 5;
}


// Generic response for health status updates.
message HealthStatusResponse {
  bool acknowledged = 1;
  string server_message = 2; // Optional: Any message from server (e.g., "OK", "Error processing")
}

// Import common protobuf types like Timestamp.
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto"; // If needed for some RPCs