// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SSS.Data.Access;

#nullable disable

namespace SSS.Data.Migrations.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250521100000_InitialCreate")]
    partial class _20250521100000_InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SSS.Data.Access.Entities.AlarmEvent", b =>
                {
                    b.Property<Guid>("AlarmId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("OccurrenceTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("AcknowledgedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Severity")
                        .HasColumnType("integer");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("AlarmId", "OccurrenceTime");

                    b.HasIndex("TagId");

                    b.HasIndex("OccurrenceTime")
                        .HasDatabaseName("IX_AlarmEvents_Unack_OccurrenceTime");

                    NpgsqlIndexBuilderExtensions.HasFilter(b.HasIndex("OccurrenceTime"), "\"AcknowledgedTime\" IS NULL");

                    b.HasIndex("TagId", "OccurrenceTime");

                    b.ToTable("AlarmEvents");
                });

            modelBuilder.Entity("SSS.Data.Access.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("LogId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LogId", "Timestamp");

                    b.HasIndex("UserId");

                    b.HasIndex("Timestamp", "EventType");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("SSS.Data.Access.Entities.BlockchainTransaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BlockchainNetwork")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DataHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("SourceSystem")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TransactionId");

                    b.HasIndex("DataHash")
                        .IsUnique()
                        .HasDatabaseName("uq_blockchaintransaction_datahash");

                    b.ToTable("BlockchainTransactions");
                });

            modelBuilder.Entity("SSS.Data.Access.Entities.Dashboard", b =>
                {
                    b.Property<Guid>("DashboardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("LayoutConfig")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("DashboardId");

                    b.HasIndex("UserId");

                    b.ToTable("Dashboards");
                });

            modelBuilder.Entity("SSS.Data.Access.Entities.DataLog", b =>
                {
                    b.Property<Guid>("LogId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OldValue")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OperationStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LogId", "Timestamp");

                    b.HasIndex("UserId");

                    b.HasIndex("TagId", "Timestamp");

                    b.ToTable("DataLogs");
                });

            modelBuilder.Entity("SSS.Data.Access.Entities.DataRetentionPolicy", b =>
                {
                    b.Property<Guid>("PolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ArchiveLocation")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("RetentionPeriod")
                        .HasColumnType("integer");

                    b.HasKey("PolicyId");

                    b.ToTable("DataRetentionPolicies");
                });

            modelBuilder.Entity("SSS.Data.Access.Entities.HistoricalData", b =>
                {
                    b.Property<Guid>("DataId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AggregationType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Quality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("DataId", "Timestamp");

                    b.HasIndex("TagId", "Timestamp");

                    b.ToTable("HistoricalData");
                });

            modelBuilder.Entity("SSS.Data.Access.Entities.MigrationStrategy", b =>
                {
                    b.Property<Guid>("StrategyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("LastExecuted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MappingRules")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("SourceSystem")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ValidationProcedure")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StrategyId");

                    b.ToTable("MigrationStrategies");
                });

            modelBuilder.Entity("SSS.Data.Access.Entities.OpcServer", b =>
                {
                    b.Property<Guid>("ServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Certificate")
                        .HasColumnType("text");

                    b.Property<string>("EndpointUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SecurityPolicy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("ServerId");

                    b.ToTable("OpcServers");
                });

            modelBuilder.Entity("SSS.Data.Access.Entities.OpcTag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsWritable")
                        .HasColumnType("boolean");

                    b.Property<string>("NodeId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uuid");

                    b.Property<string>("ValidationRules")
                        .HasColumnType("jsonb");

                    b.HasKey("TagId");

                    b.HasIndex("ServerId", "NodeId")
                        .IsUnique()
                        .HasDatabaseName("uq_opctag_serverid_nodeid");

                    b.ToTable("OpcTags");
                });

            modelBuilder.Entity("SSS.Data.Access.Entities.Permission", b =>
                {
                    b.Property<Guid>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("PermissionId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("uq_permission_code");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("SSS.Data.Access.Entities.PredictiveMaintenanceModel", b =>
                {
                    b.Property<Guid>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Checksum")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("DeploymentStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Framework")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("ModelId");

                    b.ToTable("PredictiveMaintenanceModels");
                });

            modelBuilder.Entity("SSS.Data.Access.Entities.ReportTemplate", b =>
                {
                    b.Property<Guid>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DataSources")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Schedule")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("TemplateId");

                    b.ToTable("ReportTemplates");
                });

            modelBuilder.Entity("SSS.Data.Access.Entities.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsSystemRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("RoleId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("uq_role_name");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SSS.Data.Access.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("SSS.Data.Access.Entities.Subscription", b =>
                {
                    b.Property<Guid>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DeadbandType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal?>("DeadbandValue")
                        .HasPrecision(18, 4)
                        .HasColumnType("numeric(18,4)");

                    b.Property<int>("PublishingInterval")
                        .HasColumnType("integer");

                    b.Property<int>("QueueSize")
                        .HasColumnType("integer");

                    b.Property<int>("SamplingInterval")
                        .HasColumnType("integer");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uuid");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("ServerId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("SSS.Data.Access.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ExternalIdpId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset?>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("uq_user_email");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("uq_user_username");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SSS.Data.Access.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("SSS.Data.Access.Entities.AlarmEvent", b =>
                {
                    b.HasOne("SSS.Data.Access.Entities.OpcTag", "OpcTag")
                        .WithMany("AlarmEvents")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OpcTag");
                });

            modelBuilder.Entity("SSS.Data.Access.Entities.AuditLog", b =>
                {
                    b.HasOne("SSS.Data.Access.Entities.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("SSS.Data.Access.Entities.Dashboard", b =>
                {
                    b.HasOne("SSS.Data.Access.Entities.User", "User")
                        .WithMany("Dashboards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SSS.Data.Access.Entities.DataLog", b =>
                {
                    b.HasOne("SSS.Data.Access.Entities.OpcTag", "OpcTag")
                        .WithMany("DataLogs")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSS.Data.Access.Entities.User", "User")
                        .WithMany("DataLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("OpcTag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SSS.Data.Access.Entities.HistoricalData", b =>
                {
                    b.HasOne("SSS.Data.Access.Entities.OpcTag", "OpcTag")
                        .WithMany("HistoricalData")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OpcTag");
                });

            modelBuilder.Entity("SSS.Data.Access.Entities.OpcTag", b =>
                {
                    b.HasOne("SSS.Data.Access.Entities.OpcServer", "OpcServer")
                        .WithMany("OpcTags")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OpcServer");
                });

            modelBuilder.Entity("SSS.Data.Access.Entities.RolePermission", b =>
                {
                    b.HasOne("SSS.Data.Access.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSS.Data.Access.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SSS.Data.Access.Entities.Subscription", b =>
                {
                    b.HasOne("SSS.Data.Access.Entities.OpcServer", "OpcServer")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OpcServer");
                });

            modelBuilder.Entity("SSS.Data.Access.Entities.UserRole", b =>
                {
                    b.HasOne("SSS.Data.Access.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSS.Data.Access.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SSS.Data.Access.Entities.OpcServer", b =>
                {
                    b.Navigation("OpcTags");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("SSS.Data.Access.Entities.OpcTag", b =>
                {
                    b.Navigation("AlarmEvents");

                    b.Navigation("DataLogs");

                    b.Navigation("HistoricalData");
                });

            modelBuilder.Entity("SSS.Data.Access.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("SSS.Data.Access.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SSS.Data.Access.Entities.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Dashboards");

                    b.Navigation("DataLogs");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}