// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Opc.System.Infrastructure.Data;

#nullable disable

namespace Opc.System.Infrastructure.Data.Migrations.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Opc.System.Infrastructure.Data.Models.AlarmEvent", b =>
                {
                    b.Property<Guid>("alarmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("acknowledgedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("eventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTimeOffset>("occurrenceTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("severity")
                        .HasColumnType("integer");

                    b.Property<Guid>("tagId")
                        .HasColumnType("uuid");

                    b.HasKey("alarmId");

                    b.HasIndex("occurrenceTime")
                        .HasDatabaseName("idx_alarmevent_unack_occurrencetime")
                        .HasFilter("\"acknowledgedTime\" IS NULL");

                    b.HasIndex("tagId", "occurrenceTime")
                        .HasDatabaseName("idx_alarmevent_tagid_occurrencetime");

                    b.ToTable("AlarmEvent");
                });

            modelBuilder.Entity("Opc.System.Infrastructure.Data.Models.AuditLog", b =>
                {
                    b.Property<Guid>("logId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("details")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("eventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ipAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<DateTimeOffset>("timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("userId")
                        .HasColumnType("uuid");

                    b.HasKey("logId");

                    b.HasIndex("userId");

                    b.HasIndex("timestamp", "eventType")
                        .HasDatabaseName("idx_auditlog_timestamp_eventtype");

                    b.ToTable("AuditLog");
                });

            modelBuilder.Entity("Opc.System.Infrastructure.Data.Models.BlockchainTransaction", b =>
                {
                    b.Property<Guid>("transactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("blockchainNetwork")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("dataHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("sourceSystem")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("transactionId");

                    b.HasIndex("dataHash")
                        .IsUnique()
                        .HasDatabaseName("uq_blockchaintransaction_datahash");

                    b.ToTable("BlockchainTransaction");
                });

            modelBuilder.Entity("Opc.System.Infrastructure.Data.Models.Dashboard", b =>
                {
                    b.Property<Guid>("dashboardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("isDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("layoutConfig")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("userId")
                        .HasColumnType("uuid");

                    b.HasKey("dashboardId");

                    b.HasIndex("userId");

                    b.ToTable("Dashboard");
                });

            modelBuilder.Entity("Opc.System.Infrastructure.Data.Models.DataLog", b =>
                {
                    b.Property<Guid>("logId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("newValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("oldValue")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("operationStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("tagId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("userId")
                        .HasColumnType("uuid");

                    b.HasKey("logId");

                    b.HasIndex("userId");

                    b.HasIndex("tagId", "timestamp")
                        .HasDatabaseName("idx_datalog_tagid_timestamp");

                    b.ToTable("DataLog");
                });

            modelBuilder.Entity("Opc.System.Infrastructure.Data.Models.DataRetentionPolicy", b =>
                {
                    b.Property<Guid>("policyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("archiveLocation")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("dataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("retentionPeriod")
                        .HasColumnType("integer");

                    b.HasKey("policyId");

                    b.ToTable("DataRetentionPolicy");
                });

            modelBuilder.Entity("Opc.System.Infrastructure.Data.Models.HistoricalData", b =>
                {
                    b.Property<Guid>("dataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("aggregationType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("quality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("tagId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("dataId");

                    b.HasIndex("tagId", "timestamp")
                        .HasDatabaseName("idx_historicaldata_tagid_timestamp");

                    b.ToTable("HistoricalData");
                });

            modelBuilder.Entity("Opc.System.Infrastructure.Data.Models.MigrationStrategy", b =>
                {
                    b.Property<Guid>("strategyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("lastExecuted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("mappingRules")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("sourceSystem")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("validationProcedure")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("strategyId");

                    b.ToTable("MigrationStrategy");
                });

            modelBuilder.Entity("Opc.System.Infrastructure.Data.Models.OpcServer", b =>
                {
                    b.Property<Guid>("serverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("certificate")
                        .HasColumnType("text");

                    b.Property<string>("endpointUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("securityPolicy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("version")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("serverId");

                    b.ToTable("OpcServer");
                });

            modelBuilder.Entity("Opc.System.Infrastructure.Data.Models.OpcTag", b =>
                {
                    b.Property<Guid>("tagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("dataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("isWritable")
                        .HasColumnType("boolean");

                    b.Property<string>("nodeId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("serverId")
                        .HasColumnType("uuid");

                    b.Property<string>("validationRules")
                        .HasColumnType("jsonb");

                    b.HasKey("tagId");

                    b.HasIndex("serverId", "nodeId")
                        .IsUnique()
                        .HasDatabaseName("uq_opctag_serverid_nodeid");

                    b.ToTable("OpcTag");
                });

            modelBuilder.Entity("Opc.System.Infrastructure.Data.Models.Permission", b =>
                {
                    b.Property<Guid>("permissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("permissionId");

                    b.HasIndex("code")
                        .IsUnique()
                        .HasDatabaseName("uq_permission_code");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Opc.System.Infrastructure.Data.Models.PredictiveMaintenanceModel", b =>
                {
                    b.Property<Guid>("modelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("checksum")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("deploymentStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("framework")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("version")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("modelId");

                    b.ToTable("PredictiveMaintenanceModel");
                });

            modelBuilder.Entity("Opc.System.Infrastructure.Data.Models.ReportTemplate", b =>
                {
                    b.Property<Guid>("templateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("dataSources")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("format")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("schedule")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("templateId");

                    b.ToTable("ReportTemplate");
                });

            modelBuilder.Entity("Opc.System.Infrastructure.Data.Models.Role", b =>
                {
                    b.Property<Guid>("roleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("isSystemRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("roleId");

                    b.HasIndex("name")
                        .IsUnique()
                        .HasDatabaseName("uq_role_name");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Opc.System.Infrastructure.Data.Models.RolePermission", b =>
                {
                    b.Property<Guid>("roleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("permissionId")
                        .HasColumnType("uuid");

                    b.HasKey("roleId", "permissionId");

                    b.HasIndex("permissionId");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("Opc.System.Infrastructure.Data.Models.Subscription", b =>
                {
                    b.Property<Guid>("subscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("deadbandType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal?>("deadbandValue")
                        .HasPrecision(18, 4)
                        .HasColumnType("numeric(18,4)");

                    b.Property<int>("publishingInterval")
                        .HasColumnType("integer");

                    b.Property<int>("queueSize")
                        .HasColumnType("integer");

                    b.Property<int>("samplingInterval")
                        .HasColumnType("integer");

                    b.Property<Guid>("serverId")
                        .HasColumnType("uuid");

                    b.HasKey("subscriptionId");

                    b.HasIndex("serverId");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("Opc.System.Infrastructure.Data.Models.User", b =>
                {
                    b.Property<Guid>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("externalIdpId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset?>("lastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("passwordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("userId");

                    b.HasIndex("email")
                        .IsUnique()
                        .HasDatabaseName("uq_user_email");

                    b.HasIndex("username")
                        .IsUnique()
                        .HasDatabaseName("uq_user_username");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Opc.System.Infrastructure.Data.Models.UserRole", b =>
                {
                    b.Property<Guid>("userId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("roleId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("assignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("userId", "roleId");

                    b.HasIndex("roleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Opc.System.Infrastructure.Data.Models.AlarmEvent", b =>
                {
                    b.HasOne("Opc.System.Infrastructure.Data.Models.OpcTag", null)
                        .WithMany()
                        .HasForeignKey("tagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Opc.System.Infrastructure.Data.Models.AuditLog", b =>
                {
                    b.HasOne("Opc.System.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Opc.System.Infrastructure.Data.Models.Dashboard", b =>
                {
                    b.HasOne("Opc.System.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Opc.System.Infrastructure.Data.Models.DataLog", b =>
                {
                    b.HasOne("Opc.System.Infrastructure.Data.Models.OpcTag", null)
                        .WithMany()
                        .HasForeignKey("tagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Opc.System.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Opc.System.Infrastructure.Data.Models.HistoricalData", b =>
                {
                    b.HasOne("Opc.System.Infrastructure.Data.Models.OpcTag", null)
                        .WithMany()
                        .HasForeignKey("tagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Opc.System.Infrastructure.Data.Models.OpcTag", b =>
                {
                    b.HasOne("Opc.System.Infrastructure.Data.Models.OpcServer", null)
                        .WithMany()
                        .HasForeignKey("serverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Opc.System.Infrastructure.Data.Models.RolePermission", b =>
                {
                    b.HasOne("Opc.System.Infrastructure.Data.Models.Permission", null)
                        .WithMany()
                        .HasForeignKey("permissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Opc.System.Infrastructure.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Opc.System.Infrastructure.Data.Models.Subscription", b =>
                {
                    b.HasOne("Opc.System.Infrastructure.Data.Models.OpcServer", null)
                        .WithMany()
                        .HasForeignKey("serverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Opc.System.Infrastructure.Data.Models.UserRole", b =>
                {
                    b.HasOne("Opc.System.Infrastructure.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Opc.System.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}