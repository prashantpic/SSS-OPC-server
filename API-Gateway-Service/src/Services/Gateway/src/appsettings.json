{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning",
      "Ocelot": "Warning",
      "Yarp.ReverseProxy": "Warning"
    },
    "Console": {
      "FormatterName": "json"
    },
    "Serilog": { // Example Serilog configuration, actual config often in Program.cs
      "MinimumLevel": {
        "Default": "Information",
        "Override": {
          "Microsoft": "Warning",
          "System": "Warning"
        }
      },
      "WriteTo": [
        { "Name": "Console" }
        // { "Name": "File", "Args": { "path": "logs/gateway-.log", "rollingInterval": "Day" } }
      ],
      "Enrich": [ "FromLogContext", "WithMachineName", "WithThreadId", "WithCorrelationId" ],
      "Properties": {
        "Application": "API-Gateway-Service"
      }
    }
  },
  "Kestrel": {
    "Endpoints": {
      "Http": {
        "Url": "http://localhost:5000"
      },
      "Https": {
        "Url": "https://localhost:5001"
        // "Certificate": { // Configuration for HTTPS certificate if not using development certs
        //   "Path": "path/to/certificate.pfx",
        //   "Password": "your_certificate_password"
        // }
      }
    },
    "Protocols": "Http1AndHttp2" // Important for gRPC if terminating TLS here
  },
  "AllowedHosts": "*",
  "SecurityConfigs": {
    "JwtAuthority": "https://your-identity-provider.com/", // E.g., Keycloak, Azure AD, Okta
    "JwtAudience": "api_gateway_resource", // Audience claim expected in the JWT
    "AllowedCorsOrigins": [
      "https://localhost:7000", // Example: Web-UI local development URL
      "http://localhost:7000"
      // "https://your-production-ui-domain.com"
    ],
    "ApiKeyHeaderName": "X-API-Key" // If API Key authentication is used for some routes (via custom handler)
  },
  "ServiceEndpoints": {
    "ManagementServiceBaseUrl": "http://management-service", // K8s service name or Docker Compose service name
    "AiProcessingServiceBaseUrl": "http://ai-processing-service",
    "DataServiceBaseUrl": "http://data-service",
    "DataServiceGrpcUrl": "http://data-service:50051", // Specific gRPC port if different
    "IntegrationServiceBaseUrl": "http://integration-service",
    "SecurityServiceBaseUrl": "http://security-service" // For token introspection if needed
  },
  "MqttBrokerConfig": {
    "IsEnabled": false, // Feature flag for MQTT middleware
    "Address": "mqtt-broker.example.com",
    "Port": 1883,
    "ClientId": "api_gateway_mqtt_client",
    "Username": "gateway_user",
    "PasswordSecretName": "mqtt_gateway_password" // Name of secret in a vault or config
  },
  "CacheSettings": {
    "Provider": "Redis", // "Redis" or "InMemory" (for dev)
    "ConnectionString": "redis:6379", // Redis connection string (e.g., "localhost:6379" or full sentinel/cluster string)
    "DefaultCacheRegion": "gateway_cache",
    "DefaultTTLSeconds": 300 // 5 minutes default TTL
  },
  "RateLimitingPolicies": [ // These map to Ocelot's Route-level RateLimitOptions or ASP.NET Core Rate Limiting
    {
      "RuleName": "DefaultRouteLimit", // For identification/logging, not directly used by Ocelot as a policy name
      "Endpoint": "*", // Wildcard or specific path pattern
      "Period": "1s", // e.g., 1s, 5m, 1h, 1d
      "Limit": 10 // Max requests in the period
    },
    {
      "RuleName": "AuthEndpoints",
      "Endpoint": "/auth/*",
      "Period": "10s",
      "Limit": 5
    }
  ],
  "PollyPolicies": {
    "DefaultRetryCount": 3,
    "DefaultPauseBetweenRetriesSeconds": 2,
    "DefaultCircuitBreakerThreshold": 5, // Number of consecutive exceptions before breaking
    "DefaultCircuitBreakerDurationSeconds": 30, // Duration the circuit stays open
    "DefaultTimeoutSeconds": 15 // Default request timeout
  },
  "FeatureFlags": {
    "EnableGraphQLSupport": true,
    "EnableYarpIntegration": true,
    "EnableOcelotRequestAggregation": true,
    "EnableMqttProtocolHandler": false, // Controlled by MqttBrokerConfig.IsEnabled typically
    "EnableDistributedCaching": true,
    "EnableSchemaValidationMiddleware": false,
    "EnableSwagger": true
  }
}