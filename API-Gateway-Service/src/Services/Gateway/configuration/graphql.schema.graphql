# GraphQL Schema Definition Language (SDL) for the API Gateway
# This schema defines the data and operations available through the GraphQL endpoint.

schema {
  query: Query
  mutation: Mutation
  # subscription: Subscription # Uncomment if subscriptions are implemented
}

# Root Query Type: Entry point for all read operations.
type Query {
  "Retrieves the status of a specific management client."
  managementClientStatus(clientId: ID!): ManagementClientStatus

  "Fetches an AI prediction for a given set of input parameters or tag."
  aiPrediction(tagId: String, inputFeatures: [FeatureInput!]): AiPrediction

  "Gets historical time-series data for specified tags within a time range."
  historicalData(tagIds: [String!]!, startTime: DateTime!, endTime: DateTime!): [TimeSeriesDataPoint]

  "Lists available OPC servers configured in the system."
  opcServers: [OpcServerInfo]

  "Retrieves details for a specific OPC tag."
  opcTagDetails(tagId: ID!): OpcTagDetail

  "Retrieves recent alarm events."
  recentAlarms(limit: Int = 10): [AlarmEventItem]
}

# Root Mutation Type: Entry point for all write operations.
type Mutation {
  "Acknowledges an alarm event."
  acknowledgeAlarm(alarmId: ID!, acknowledgementComment: String): AlarmAcknowledgementResponse

  "Updates the configuration for a management client."
  updateManagementClientConfig(clientId: ID!, config: ClientConfigInput!): ManagementClientStatus

  "Initiates a write operation to an OPC tag."
  writeOpcTagValue(tagId: ID!, value: String!): OpcTagWriteResponse
}

# Example Input Types
input FeatureInput {
  name: String!
  value: Float!
}

input ClientConfigInput {
  "New polling interval for the client."
  pollingIntervalSeconds: Int
  "Enable or disable specific features."
  featureFlags: [String!]
}


# Example Object Types (representing data from downstream services)

"Represents the status of a management client."
type ManagementClientStatus {
  clientId: ID!
  status: String!
  lastSeen: DateTime
  activeSubscriptions: Int
  health: ClientHealthEnum!
}

"Health status enumeration for clients."
enum ClientHealthEnum {
  HEALTHY
  DEGRADED
  UNHEALTHY
  UNKNOWN
}

"Represents an AI prediction result."
type AiPrediction {
  tagId: String
  "The predicted value or outcome."
  predictedValue: Float
  "Confidence score of the prediction."
  confidence: Float
  "Timestamp of when the prediction was generated."
  predictionTime: DateTime
  "Model version used for this prediction."
  modelVersion: String
}

"Represents a single point of time-series data."
type TimeSeriesDataPoint {
  tagId: String!
  timestamp: DateTime!
  value: String! # Using String to accommodate various data types, can be specialized
  quality: String
}

"Basic information about a configured OPC server."
type OpcServerInfo {
  serverId: ID!
  name: String!
  type: OpcServerTypeEnum!
  endpointUrl: String!
  isActive: Boolean!
}

"OPC Server Type Enumeration."
enum OpcServerTypeEnum {
  DA
  UA
  XML_DA
  HDA
  AC
}

"Detailed information for an OPC Tag."
type OpcTagDetail {
  tagId: ID!
  nodeId: String!
  dataType: String!
  description: String
  isWritable: Boolean!
  currentValue: TimeSeriesDataPoint # Example of nesting
}

"Represents an alarm event."
type AlarmEventItem {
  alarmId: ID!
  sourceNode: String!
  message: String!
  severity: Int!
  eventTime: DateTime!
  isAcknowledged: Boolean!
}

# Example Mutation Response Types

"Response from an alarm acknowledgement mutation."
type AlarmAcknowledgementResponse {
  success: Boolean!
  alarmId: ID
  message: String
}

"Response from an OPC tag write operation."
type OpcTagWriteResponse {
  success: Boolean!
  tagId: ID!
  writtenValue: String
  errorMessage: String
}


# Scalar Types
scalar DateTime # Custom scalar for date-time values

# Subscriptions (Example - Uncomment and define if real-time updates are needed)
# type Subscription {
#   newAlarmEvents: AlarmEventItem
#   clientStatusUpdates(clientId: ID!): ManagementClientStatus
# }