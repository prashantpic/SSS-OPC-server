{
  "Routes": [
    // Example: Management Service Routes
    {
      "UpstreamPathTemplate": "/api/management/{everything}",
      "UpstreamHttpMethod": [ "GET", "POST", "PUT", "DELETE" ],
      "DownstreamPathTemplate": "/api/management/{everything}",
      "DownstreamScheme": "http", // Or https if internal services use it
      "DownstreamHostAndPorts": [
        {
          "Host": "management-service", // Service name in Docker Compose or K8s
          "Port": 80 // Or the actual port of the service
        }
      ],
      "AuthenticationOptions": {
        "AuthenticationProviderKey": "JwtBearer", // Matches scheme in Program.cs
        "AllowedScopes": [] // Define scopes if used
      },
      "RateLimitOptions": {
        "ClientWhitelist": [],
        "EnableRateLimiting": true,
        "Period": "1s",
        "PeriodTimespan": 1,
        "Limit": 5, // Example: 5 requests per second
        "RateLimitCounterPrefix": "ocelot_rl_management"
      },
      "QoSOptions": {
        "ExceptionsAllowedBeforeBreaking": 3,
        "DurationOfBreak": 10000, // 10 seconds
        "TimeoutValue": 5000 // 5 seconds
      },
      "CacheOptions": {
        "TtlSeconds": 15,
        "Region": "management_service"
      },
      "LoadBalancerOptions": {
        "Type": "LeastConnection" // Or RoundRobin, NoLoadBalancer
      },
      "DelegatingHandlers": [
        "UnifiedLoggingDelegatingHandler",
        "CorrelationIdDelegatingHandler"
      ]
    },
    // Example: AI Processing Service Routes
    {
      "UpstreamPathTemplate": "/api/ai/{everything}",
      "UpstreamHttpMethod": [ "POST", "GET" ],
      "DownstreamPathTemplate": "/api/ai/{everything}",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "ai-processing-service",
          "Port": 80
        }
      ],
      "AuthenticationOptions": {
        "AuthenticationProviderKey": "JwtBearer"
      },
      "RateLimitOptions": {
        "EnableRateLimiting": true,
        "Period": "1m",
        "Limit": 100,
        "RateLimitCounterPrefix": "ocelot_rl_ai"
      },
      "QoSOptions": {
        "TimeoutValue": 30000 // Longer timeout for potentially long AI operations
      },
      "DelegatingHandlers": [
        "UnifiedLoggingDelegatingHandler",
        "CorrelationIdDelegatingHandler",
        "RequestTransformationDelegatingHandler" // Example if specific transformation is needed for AI
      ]
    },
    // Example: Data Service Routes
    {
      "UpstreamPathTemplate": "/api/data/{everything}",
      "UpstreamHttpMethod": [ "GET", "POST" ],
      "DownstreamPathTemplate": "/api/data/{everything}",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "data-service",
          "Port": 80
        }
      ],
      "AuthenticationOptions": {
        "AuthenticationProviderKey": "JwtBearer"
      },
      "CacheOptions": {
        "TtlSeconds": 60,
        "Region": "data_service"
      },
      "DelegatingHandlers": [
        "UnifiedLoggingDelegatingHandler",
        "CorrelationIdDelegatingHandler"
      ]
    },
    // Example: Integration Service Routes (e.g., for MQTT interactions via HTTP)
    {
      "UpstreamPathTemplate": "/api/integration/{everything}",
      "UpstreamHttpMethod": [ "POST", "GET" ],
      "DownstreamPathTemplate": "/api/integration/{everything}",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "integration-service",
          "Port": 80
        }
      ],
      "AuthenticationOptions": {
        "AuthenticationProviderKey": "JwtBearer"
      },
      "DelegatingHandlers": [
        "UnifiedLoggingDelegatingHandler",
        "CorrelationIdDelegatingHandler"
      ]
    },
    // Example: Aggregation Route (REQ-SAP-004 for composition)
    {
      "UpstreamPathTemplate": "/api/composite/dashboard",
      "UpstreamHttpMethod": [ "GET" ],
      "Aggregates": [
        {
          "RouteKeys": [ // These keys map to Route.Key in other routes
            "management_status",
            "latest_alerts"
          ],
          "Aggregator": "DownstreamServicesAggregator" // Name of your custom aggregator
        }
      ],
      "AuthenticationOptions": {
        "AuthenticationProviderKey": "JwtBearer"
      },
      "DelegatingHandlers": [
        "UnifiedLoggingDelegatingHandler",
        "CorrelationIdDelegatingHandler"
      ]
    },
    // Individual routes for aggregation (must have unique Keys)
    {
      "Key": "management_status",
      "UpstreamPathTemplate": "/api/internal/management/status", // Hidden upstream path for aggregation
      "UpstreamHttpMethod": [ "GET" ],
      "DownstreamPathTemplate": "/api/management/status",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [ { "Host": "management-service", "Port": 80 } ]
      // No auth here if aggregated route has it and services trust gateway internal calls after auth
    },
    {
      "Key": "latest_alerts",
      "UpstreamPathTemplate": "/api/internal/data/alerts/latest",
      "UpstreamHttpMethod": [ "GET" ],
      "DownstreamPathTemplate": "/api/data/alerts?limit=5",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [ { "Host": "data-service", "Port": 80 } ]
    }
  ],
  "GlobalConfiguration": {
    "BaseUrl": "https://localhost:5001", // Public facing URL of the gateway
    "ServiceDiscoveryProvider": { // Example for Consul, remove if not used
      // "Host": "consul",
      // "Port": 8500,
      // "Type": "Consul"
      "Type": "Configuration" // Use configuration for DownstreamHostAndPorts directly
    },
    "RateLimitOptions": {
      "QuotaExceededMessage": "Rate limit exceeded. Please try again later.",
      "HttpStatusCode": 429,
      "DisableRateLimitHeaders": false,
      "ClientIdHeader": "X-Client-ID" // Header to identify client for rate limiting
    },
    "QoSOptions": { // Default QoS if not specified per route
      "ExceptionsAllowedBeforeBreaking": 3,
      "DurationOfBreak": 5000, // milliseconds
      "TimeoutValue": 2000 // milliseconds
    },
    "RequestIdKey": "X-Correlation-ID" // Ensures Ocelot uses this for logging/tracing
  },
  "Aggregates": [ // Deprecated way, prefer Route.Aggregates
    // {
    //   "RouteKeys": [
    //     "management_status",
    //     "latest_alerts"
    //   ],
    //   "UpstreamPathTemplate": "/api/composite/dashboard_old",
    //   "Aggregator": "DownstreamServicesAggregator"
    // }
  ]
  // "RateLimitingPolicies" section is not standard in Ocelot.
  // Rate limits are typically defined per route in Ocelot's `RateLimitOptions`.
  // For more complex, named policies, you might integrate with ASP.NET Core Rate Limiting middleware
  // and apply those policies using custom delegating handlers or Ocelot's extensibility.
  // The `RateLimitOptions` within `GlobalConfiguration` provide defaults/global settings.
}