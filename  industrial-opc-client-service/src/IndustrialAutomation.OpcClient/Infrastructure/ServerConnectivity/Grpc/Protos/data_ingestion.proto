syntax = "proto3";

import "common.proto"; // For OpcPoint, StatusResponse etc.

option csharp_namespace = "IndustrialAutomation.OpcClient.Infrastructure.ServerConnectivity.Grpc.Generated";

package DataIngestion;

// Service for ingesting data from OPC clients
service DataIngestionService {
    // Client sends a batch of real-time data
    rpc SendRealtimeData (RealtimeDataBatchRequest) returns (GrpcCommon.StatusResponse);
    // Client sends a batch of historical data
    rpc SendHistoricalData (HistoricalDataBatchRequest) returns (GrpcCommon.StatusResponse);
    // Client sends a batch of alarm/event data
    rpc SendAlarmEventData (AlarmEventBatchRequest) returns (GrpcCommon.StatusResponse);
    // Client sends output from an edge AI model
    rpc SendEdgeAiOutput (EdgeAiOutputRequest) returns (GrpcCommon.StatusResponse);
    // Client sends a critical write log entry
    rpc SendCriticalWriteLog (CriticalWriteLogRequest) returns (GrpcCommon.StatusResponse);
    // Client sends a generic audit event
    rpc SendAuditEvent (AuditEventRequest) returns (GrpcCommon.StatusResponse);
    // Client sends status of an OPC UA subscription
    rpc SendSubscriptionStatus (SubscriptionStatusRequest) returns (GrpcCommon.StatusResponse);

    // Example of client-side streaming for high-throughput data
    // rpc StreamRealtimeData (stream RealtimeDataBatchRequest) returns (GrpcCommon.StatusResponse);
}

// ========== Real-time Data Messages ==========
message RealtimeDataBatchRequest {
    string client_id = 1;
    GrpcCommon.Timestamp batch_timestamp_utc = 2;
    repeated GrpcCommon.OpcPoint data_points = 3;
}

// ========== Historical Data Messages ==========
message HistoricalDataBatchRequest {
    string client_id = 1;
    string query_id = 2;
    GrpcCommon.Timestamp batch_timestamp_utc = 3;
    repeated GrpcCommon.OpcPoint historical_data_points = 4;
}

// ========== Alarm/Event Data Messages ==========
message AcAlarmEvent {
    string event_id = 1;
    string server_id = 2;
    string source_name = 3;
    string message = 4;
    GrpcCommon.Timestamp timestamp = 5;
    string severity = 6;
    string category = 7;
    bool is_acknowledged = 8;
    bool is_confirmed = 9;
    string state = 10;
    string condition_name = 11;
    string comment = 12;
    string actor_id = 13;
    map<string, GrpcCommon.OpcValue> event_fields = 14; // Using OpcValue for dynamic fields
}

message AlarmEventBatchRequest {
    string client_id = 1;
    GrpcCommon.Timestamp batch_timestamp_utc = 2;
    repeated AcAlarmEvent alarm_events = 3;
}

// ========== Edge AI Output Messages ==========
message EdgeAiOutput {
    string model_name = 1;
    string model_version = 2;
    GrpcCommon.Timestamp inference_timestamp_utc = 3;
    map<string, GrpcCommon.OpcValue> results = 4;
    string status = 5;
    map<string, GrpcCommon.OpcValue> metadata = 6;
}
message EdgeAiOutputRequest {
    string client_id = 1; // Client sending the output
    EdgeAiOutput output = 2;
}

// ========== Logging Messages ==========
message CriticalWriteLog {
    string client_id = 1;
    GrpcCommon.Timestamp timestamp_utc = 2;
    string tag_id = 3;
    GrpcCommon.OpcValue old_value = 4;
    GrpcCommon.OpcValue new_value = 5;
    string initiating_user = 6;
    string context = 7;
    bool success = 8;
    string status_code = 9;
    string error_message = 10;
}
message CriticalWriteLogRequest {
    CriticalWriteLog log_entry = 1;
}

message AuditEvent {
    string client_id = 1;
    GrpcCommon.Timestamp timestamp_utc = 2;
    string event_type = 3;
    string source = 4;
    string description = 5;
    map<string, string> details = 6;
}
message AuditEventRequest {
    AuditEvent audit_event = 1;
}

// ========== Subscription Status Messages ==========
message SubscriptionStatus {
    string client_id = 1;
    string subscription_id = 2;
    string server_id = 3;
    GrpcCommon.Timestamp timestamp_utc = 4;
    string status = 5;
    string last_error_message = 6;
    int32 data_change_count = 7;
    int32 monitored_item_count = 8;
    int32 queue_overflow_count = 9;
}
message SubscriptionStatusRequest {
    SubscriptionStatus status_report = 1;
}