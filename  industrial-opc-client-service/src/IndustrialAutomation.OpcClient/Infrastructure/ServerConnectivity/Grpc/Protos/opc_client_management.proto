syntax = "proto3";

import "common.proto"; // If common types are used

option csharp_namespace = "IndustrialAutomation.OpcClient.Infrastructure.ServerConnectivity.Grpc.Generated";

package OpcClientManagement;

// Service for managing OPC client instances
service ClientManagementService {
    // Gets the full configuration for a client
    rpc GetConfiguration (GetConfigurationRequest) returns (ClientConfigurationResponse);
    // Client sends its health status
    rpc SendClientStatus (ClientHealthStatusRequest) returns (GrpcCommon.StatusResponse);
    // Server pushes an AI model update to the client
    rpc UpdateEdgeModel (UpdateEdgeModelRequest) returns (GrpcCommon.StatusResponse);
    // Client requests a specific AI model (e.g., on startup or if missing)
    rpc RequestEdgeModel (RequestEdgeModelRequest) returns (EdgeModelPackage);
}

// ========== Configuration Messages ==========
message GetConfigurationRequest {
    string client_id = 1;
    string current_config_version = 2; // Optional: for diffs or conditional updates
}

message ClientConfigurationResponse {
    ClientConfiguration configuration = 1;
    string config_version = 2;
}

message ServerConnectionConfig {
    string server_id = 1;
    string standard = 2; // "DA", "UA", "XMLDA", "HDA", "AC"
    string endpoint_url = 3;
    string security_policy_uri = 4;
    string message_security_mode = 5;
    string user_identity_type = 6;
    string username = 7;
    string password = 8; // Note: Sending passwords like this is not ideal. Consider secure secret management.
    string client_certificate_thumbprint = 9;
}

message TagDefinition {
    string tag_id = 1;
    string opc_address = 2;
    string server_id = 3;
    string opc_standard = 4;
    string data_type = 5;
    double scaling_factor = 6;
    double offset = 7;
    bool is_active = 8;
    bool is_writable = 9;
}

message UaMonitoredItem {
    string item_id = 1;
    string node_id = 2;
    double sampling_interval = 3;
    string data_change_trigger = 4;
    int32 queue_size = 5;
    bool discard_oldest = 6;
}

message UaSubscriptionConfig {
    string subscription_id = 1;
    string server_id = 2;
    double publishing_interval = 3;
    int32 lifetime_count = 4;
    int32 max_keep_alive_count = 5;
    int32 max_notifications_per_publish = 6;
    bool publishing_enabled = 7;
    bytes priority = 8; // byte in C# is uint32 in proto or bytes if single byte
    repeated UaMonitoredItem monitored_items = 9;
}

message ValidationRule {
    string tag_id = 1;
    string rule_type = 2;
    string parameter_json = 3;
    bool enabled = 4;
}

message WriteLimitPolicy {
    string tag_id = 1;
    bool rate_limiting_enabled = 2;
    int32 max_writes_per_minute = 3;
    bool value_change_threshold_enabled = 4;
    double min_value_change_percentage = 5;
    bool require_confirmation_below_threshold = 6;
}

message EdgeModelMetadata {
    string model_name = 1;
    string version = 2;
    string friendly_name = 3;
    string file_path_hint = 4; // Server might provide a hint, client resolves actual path
    GrpcCommon.Timestamp deployment_timestamp_utc = 5;
    map<string, string> input_schema = 6;
    map<string, string> output_schema = 7;
    string description = 8;
    string execution_provider = 9;
}

message ClientConfiguration {
    string client_id = 1;
    repeated ServerConnectionConfig server_connections = 2;
    repeated TagDefinition tag_definitions = 3;
    repeated UaSubscriptionConfig ua_subscriptions = 4;
    repeated ValidationRule validation_rules = 5;
    repeated WriteLimitPolicy write_limit_policies = 6;
    EdgeModelMetadata active_edge_model = 7;
    map<string, string> general_settings = 8;
}

// ========== Status Messages ==========
message ClientHealthStatus {
    string client_id = 1;
    GrpcCommon.Timestamp timestamp_utc = 2;
    string overall_status = 3;
    map<string, string> server_connection_statuses = 4;
    map<string, string> subscription_statuses = 5;
    int64 data_buffer_size = 6;
    double cpu_load = 7;
    double memory_usage = 8;
}

message ClientHealthStatusRequest {
    ClientHealthStatus status = 1;
}

// ========== Edge AI Model Management Messages ==========
message UpdateEdgeModelRequest {
    EdgeModelMetadata metadata = 1;
    bytes model_content = 2; // The actual ONNX model file bytes
}

message RequestEdgeModelRequest {
    string model_name = 1;
    string version = 2; // "latest" or specific version
}

message EdgeModelPackage {
    EdgeModelMetadata metadata = 1;
    bytes model_content = 2;
    GrpcCommon.StatusResponse status = 3; // To indicate if model was found/packaged successfully
}